# GitHub Actions workflow for Pull Request validation and develop branch testing
name: Pull Request Checks and Development Testing

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [develop] # Also validate on develop branch pushes

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      config-changed: ${{ steps.changes.outputs.config }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'webrtc-app/**'
            backend:
              - 'Flask-Backend/**'
            config:
              - 'nginx.conf'
              - '.github/workflows/**'

  test-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Updated to LTS version
          cache: "npm"
          cache-dependency-path: "./webrtc-app/package-lock.json"

      - name: Install frontend dependencies
        working-directory: ./webrtc-app
        run: npm ci

      - name: Run frontend linting
        working-directory: ./webrtc-app
        run: npm run lint

      - name: Run TypeScript type checking
        working-directory: ./webrtc-app
        run: npm run type-check

      - name: Run frontend tests
        working-directory: ./webrtc-app
        run: npm test

      - name: Build frontend
        working-directory: ./webrtc-app
        run: npm run build

  test-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'

    strategy:
      matrix:
        python-version: ["3.9", "3.11"]

    env:
      # Test environment configuration
      TESTING: true
      FLASK_ENV: testing
      # Since we use mongomock, we don't need a real MongoDB connection
      MONGODB_URI: mongodb://localhost:27017/test_db_mock

    # Note: MongoDB service removed since tests use mongomock
    # No real database connection needed for testing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5 # Updated to latest version
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "**/requirements*.txt"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('Flask-Backend/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        working-directory: ./Flask-Backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Verify test environment
        run: |
          echo "Tests use mongomock - no real MongoDB connection needed"
          pip list | grep -E "(pymongo|mongomock|pytest|flask)"

      - name: Run backend linting
        working-directory: ./Flask-Backend
        run: |
          flake8 server.py tests/ --max-line-length=100 --ignore=E203,W503
          black --check server.py tests/
        continue-on-error: true

      - name: Run unit tests
        working-directory: ./Flask-Backend
        run: make test-unit

      - name: Run Socket.IO tests
        working-directory: ./Flask-Backend
        run: make test-socket

      - name: Run integration tests
        working-directory: ./Flask-Backend
        run: make test-integration

      - name: Run comprehensive test suite with coverage
        working-directory: ./Flask-Backend
        run: make ci-test

      - name: Check test coverage threshold
        working-directory: ./Flask-Backend
        run: |
          python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          coverage = float(tree.getroot().attrib['line-rate']) * 100
          print(f'Coverage: {coverage:.1f}%')
          if coverage < 90:
              print(f'WARNING: Coverage {coverage:.1f}% is below recommended threshold of 90%')
              print('Consider adding more tests to improve coverage.')
          else:
              print(f'SUCCESS: Coverage {coverage:.1f}% meets recommended threshold')
          "

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-py${{ matrix.python-version }}
          path: |
            Flask-Backend/test-results.xml
            Flask-Backend/coverage.xml
            Flask-Backend/htmlcov/

  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install security tools
        working-directory: ./Flask-Backend
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run safety check
        working-directory: ./Flask-Backend
        run: safety check -r requirements.txt -r requirements-test.txt
        continue-on-error: true

      - name: Run bandit security scan
        working-directory: ./Flask-Backend
        run: bandit -r server.py -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: Flask-Backend/bandit-report.json
          retention-days: 30

  pr-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-frontend, test-backend, security-scan]
    if: always()

    steps:
      - name: PR Validation Summary
        run: |
          echo "# 🔍 Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: ${{ needs.detect-changes.outputs.frontend-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: ${{ needs.detect-changes.outputs.backend-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Config**: ${{ needs.detect-changes.outputs.config-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Tests**: ${{ needs.test-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Tests**: ${{ needs.test-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine overall status
          FRONTEND_STATUS="${{ needs.test-frontend.result }}"
          BACKEND_STATUS="${{ needs.test-backend.result }}"
          SECURITY_STATUS="${{ needs.security-scan.result }}"

          if [ "${{ needs.detect-changes.outputs.frontend-changed }}" == "false" ] && [ "${{ needs.detect-changes.outputs.backend-changed }}" == "false" ]; then
            echo "ℹ️ **No code changes detected** - Only documentation or configuration files were modified." >> $GITHUB_STEP_SUMMARY
          elif [ "$FRONTEND_STATUS" == "success" ] || [ "$FRONTEND_STATUS" == "skipped" ] && [ "$BACKEND_STATUS" == "success" ] || [ "$BACKEND_STATUS" == "skipped" ] && [ "$SECURITY_STATUS" == "success" ] || [ "$SECURITY_STATUS" == "skipped" ]; then
            echo "✅ **All tests passed** - This PR is ready for review!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some tests failed** - Please review and fix the failing tests before merging." >> $GITHUB_STEP_SUMMARY
          fi
