# GitHub Actions CI/CD Pipeline for Flask Backend Tests
name: Flask Backend Tests

on:
  push:
    branches: [develop] # Only run on develop branch pushes
    paths:
      - "Flask-Backend/**"
      - ".github/workflows/test.yml"
  pull_request:
    branches: [main, develop] # Run on PRs to main and develop
    paths:
      - "Flask-Backend/**"
      - ".github/workflows/test.yml"

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      # Test environment configuration
      TESTING: true
      FLASK_ENV: testing
      # Since we use mongomock, we don't need a real MongoDB connection
      MONGODB_URI: mongodb://localhost:27017/test_db_mock

    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        python-version: ["3.9", "3.11"] # Reduced to 2 versions to minimize infrastructure issues

    # Note: MongoDB service removed since tests use mongomock
    # No real database connection needed for testing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('Flask-Backend/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: Flask-Backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          echo "Installed packages:"
          pip list

      - name: Verify test environment
        run: |
          echo "Verifying test environment setup..."
          echo "Python version: $(python --version)"
          echo "Pip packages:"
          pip list | grep -E "(pymongo|mongomock|pytest|flask)"
          echo "Tests use mongomock - no real MongoDB connection needed"

      - name: Run linting
        working-directory: Flask-Backend
        run: |
          echo "Running code quality checks..."
          flake8 server.py tests/ --max-line-length=100 --ignore=E203,W503,F841 || echo "Linting failed"
          black --check server.py tests/ || echo "Black formatting check failed"
        continue-on-error: true

      - name: Debug test environment
        working-directory: Flask-Backend
        run: |
          echo "=== Environment Debug ==="
          echo "Python version: $(python --version)"
          echo "Working directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          echo "Test files:"
          ls -la tests/
          echo "Requirements files exist:"
          ls -la requirements*.txt
          echo "=== End Debug ==="

      - name: Run unit tests
        working-directory: Flask-Backend
        run: |
          echo "Running unit tests..."
          make test-unit || (echo "Unit tests failed" && exit 1)

      - name: Run Socket.IO tests
        working-directory: Flask-Backend
        run: |
          echo "Running Socket.IO tests..."
          make test-socket || (echo "Socket tests failed" && exit 1)

      - name: Run integration tests
        working-directory: Flask-Backend
        run: |
          echo "Running integration tests..."
          make test-integration || (echo "Integration tests failed" && exit 1)

      - name: Run full test suite with coverage
        working-directory: Flask-Backend
        run: |
          echo "Running comprehensive test suite with coverage..."
          python -m pytest tests/ --cov=server --cov-report=xml --cov-report=html --junit-xml=test-results.xml -v
          echo "Generated coverage files:"
          ls -la coverage.xml test-results.xml htmlcov/ || echo "Some coverage files missing"

      - name: Validate test coverage threshold
        working-directory: Flask-Backend
        run: |
          python -c "
          import xml.etree.ElementTree as ET
          try:
              tree = ET.parse('coverage.xml')
              coverage = float(tree.getroot().attrib['line-rate']) * 100
              print(f'Coverage: {coverage:.1f}%')
              if coverage < 90:
                  print(f'ERROR: Coverage {coverage:.1f}% is below minimum threshold of 90%')
                  exit(1)
              else:
                  print(f'SUCCESS: Coverage {coverage:.1f}% meets minimum threshold')
          except Exception as e:
              print(f'ERROR: Could not parse coverage.xml: {e}')
              exit(1)
          "

      - name: List generated files for debugging
        working-directory: Flask-Backend
        if: always()
        run: |
          echo "=== Generated Files Debug ==="
          ls -la
          echo "Coverage files:"
          ls -la coverage.xml test-results.xml 2>/dev/null || echo "XML files not found"
          echo "HTML coverage directory:"
          ls -la htmlcov/ 2>/dev/null || echo "htmlcov directory not found"
          echo "=== End Files Debug ==="

      - name: Upload coverage to Codecov (optional)
        if: always() && hashFiles('Flask-Backend/coverage.xml') != ''
        run: |
          echo "Coverage file exists, attempting to upload to Codecov..."
          curl -X POST \
            -H "Accept: application/json" \
            -H "Authorization: token ${{ secrets.CODECOV_TOKEN }}" \
            -F "file=@Flask-Backend/coverage.xml" \
            "https://codecov.io/upload/v2" || echo "Codecov upload failed, continuing..."

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            Flask-Backend/test-results.xml
            Flask-Backend/coverage.xml
          retention-days: 30

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('Flask-Backend/htmlcov/**') != ''
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: Flask-Backend/htmlcov/
          retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        working-directory: Flask-Backend
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run safety check
        working-directory: Flask-Backend
        run: safety check -r requirements.txt -r requirements-test.txt
        continue-on-error: true

      - name: Run bandit security scan
        working-directory: Flask-Backend
        run: bandit -r server.py -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: Flask-Backend/bandit-report.json
          retention-days: 30
