# GitHub Actions CI/CD Pipeline for Flask Backend Tests
name: Flask Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Flask-Backend/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Flask-Backend/**'
      - '.github/workflows/test.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('Flask-Backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: Flask-Backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        sleep 10

    - name: Run linting
      working-directory: Flask-Backend
      run: |
        pip install flake8 black
        flake8 server.py tests/ --max-line-length=100 --ignore=E203,W503
        black --check server.py tests/
      continue-on-error: true

    - name: Run unit tests
      working-directory: Flask-Backend
      run: make test-unit

    - name: Run Socket.IO tests
      working-directory: Flask-Backend
      run: make test-socket

    - name: Run integration tests
      working-directory: Flask-Backend
      run: make test-integration

    - name: Run full test suite with coverage
      working-directory: Flask-Backend
      run: make ci-test

    - name: Validate test coverage threshold
      working-directory: Flask-Backend
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        coverage = float(tree.getroot().attrib['line-rate']) * 100
        print(f'Coverage: {coverage:.1f}%')
        if coverage < 90:
            print(f'ERROR: Coverage {coverage:.1f}% is below minimum threshold of 90%')
            exit(1)
        else:
            print(f'SUCCESS: Coverage {coverage:.1f}% meets minimum threshold')
        "

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: Flask-Backend/coverage.xml
        directory: Flask-Backend
        flags: backend
        name: flask-backend-coverage
        fail_ci_if_error: false

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          Flask-Backend/test-results.xml
          Flask-Backend/htmlcov/
        retention-days: 30

    - name: Archive coverage report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: Flask-Backend/htmlcov/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      working-directory: Flask-Backend
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      working-directory: Flask-Backend
      run: safety check -r requirements.txt -r requirements-test.txt
      continue-on-error: true

    - name: Run bandit security scan
      working-directory: Flask-Backend
      run: bandit -r server.py -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: Flask-Backend/bandit-report.json
        retention-days: 30
