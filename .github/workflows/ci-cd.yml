name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./webrtc-app/package-lock.json"

      - name: Install frontend dependencies
        working-directory: ./webrtc-app
        run: npm ci

      - name: Build frontend
        working-directory: ./webrtc-app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./webrtc-app/dist

  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install backend dependencies
        working-directory: ./Flask-Backend
        run: |
          python -m pip install --upgrade pip
          # Don't overwrite the existing requirements.txt - use it instead
          pip install -r requirements.txt

      - name: Test backend imports
        working-directory: ./Flask-Backend
        run: |
          python -c "import server; print('Backend imports successfully')"

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ./Flask-Backend

  deploy:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.ref == 'refs/heads/main'
    environment: webrtc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./webrtc-app/dist

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./Flask-Backend

      - name: Upload artifacts to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./webrtc-app/dist,./Flask-Backend,./nginx.conf"
          target: "/tmp/deploy"
          rm: true

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Stop services if running
            sudo systemctl stop flask-backend || true
            sudo systemctl stop nginx || true

            # Create application directory
            sudo mkdir -p /opt/webrtc-app
            sudo chown ec2-user:ec2-user /opt/webrtc-app

            # Backup current deployment
            if [ -d "/opt/webrtc-app/current" ]; then
              sudo rm -rf /opt/webrtc-app/backup
              sudo mv /opt/webrtc-app/current /opt/webrtc-app/backup
            fi

            # Create new deployment directory
            mkdir -p /opt/webrtc-app/current

            # Move uploaded files to deployment directory
            cp -r /tmp/deploy/Flask-Backend /opt/webrtc-app/current/
            mkdir -p /opt/webrtc-app/current/webrtc-app
            cp -r /tmp/deploy/webrtc-app/dist /opt/webrtc-app/current/webrtc-app/

            # Setup Python environment and install backend dependencies
            cd /opt/webrtc-app/current/Flask-Backend
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # Verify gunicorn installation
            echo "Checking Gunicorn installation..."
            which gunicorn
            gunicorn --version

            # Also verify the path exists
            ls -la venv/bin/

            # Install and configure MongoDB if not already installed
            if ! command -v mongod &> /dev/null; then
              echo "Installing MongoDB..."
              # Add MongoDB repository
              sudo tee /etc/yum.repos.d/mongodb-org-7.0.repo > /dev/null <<EOF
            [mongodb-org-7.0]
            name=MongoDB Repository
            baseurl=https://repo.mongodb.org/yum/amazon/2023/mongodb-org/7.0/x86_64/
            gpgcheck=1
            enabled=1
            gpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc
            EOF
              sudo dnf install -y mongodb-org
              sudo systemctl enable mongod
            fi
            sudo systemctl start mongod || true

            # Install nginx if not already installed
            if ! command -v nginx &> /dev/null; then
              echo "Installing Nginx..."
              sudo dnf install -y nginx
              sudo systemctl enable nginx
            fi

            # Copy frontend build files to nginx directory
            sudo rm -rf /usr/share/nginx/html/*
            sudo cp -r /opt/webrtc-app/current/webrtc-app/dist/* /usr/share/nginx/html/

            # Create systemd service for Flask backend
            sudo tee /etc/systemd/system/flask-backend.service > /dev/null <<EOF
            [Unit]
            Description=Flask Backend for WebRTC App
            After=network.target mongod.service
            Requires=mongod.service

            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/opt/webrtc-app/current/Flask-Backend
            Environment=PATH=/opt/webrtc-app/current/Flask-Backend/venv/bin
            Environment=FLASK_ENV=production
            Environment=PYTHONPATH=/opt/webrtc-app/current/Flask-Backend
            ExecStart=/opt/webrtc-app/current/Flask-Backend/venv/bin/gunicorn --worker-class eventlet -w 1 --bind 0.0.0.0:5002 wsgi:app
            Restart=always
            RestartSec=10
            StandardOutput=journal
            StandardError=journal

            [Install]
            WantedBy=multi-user.target
            EOF

            # Copy nginx configuration from uploaded file
            echo "Copying nginx configuration..."
            sudo cp /tmp/deploy/nginx.conf /etc/nginx/conf.d/webrtc-app.conf

            # Remove default nginx configuration if it exists
            sudo rm -f /etc/nginx/conf.d/default.conf
            sudo rm -f /etc/nginx/sites-enabled/default

            # Test nginx configuration
            sudo nginx -t

            # Reload systemd and enable services
            sudo systemctl daemon-reload
            sudo systemctl enable flask-backend
            sudo systemctl enable nginx

            # Start services
            sudo systemctl start flask-backend
            sudo systemctl start nginx

            # Check service status
            echo "=== Flask Backend Status ==="
            sudo systemctl status flask-backend --no-pager
            echo "=== Nginx Status ==="
            sudo systemctl status nginx --no-pager

            # Clean up temporary files
            rm -rf /tmp/deploy

            echo "Deployment completed successfully!"

      - name: Health Check
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Wait for services to start
            sleep 10

            # Check if Flask backend is responding
            if curl -f http://localhost:5002/ > /dev/null 2>&1; then
              echo "‚úÖ Flask backend is healthy"
            else
              echo "‚ùå Flask backend health check failed"
              sudo systemctl status flask-backend --no-pager
              exit 1
            fi

            # Check if Nginx is serving the frontend
            if curl -f http://localhost/ > /dev/null 2>&1; then
              echo "‚úÖ Nginx frontend is healthy"
            else
              echo "‚ùå Nginx frontend health check failed"
              sudo systemctl status nginx --no-pager
              exit 1
            fi

            echo "üéâ All services are healthy and running!"

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "‚ö†Ô∏è Deployment failed, rolling back to previous version..."

            # Stop current services
            sudo systemctl stop flask-backend || true
            sudo systemctl stop nginx || true

            # Rollback to backup if it exists
            if [ -d "/opt/webrtc-app/backup" ]; then
              sudo rm -rf /opt/webrtc-app/current
              sudo mv /opt/webrtc-app/backup /opt/webrtc-app/current
              
              # Restore frontend files
              sudo rm -rf /usr/share/nginx/html/*
              sudo cp -r /opt/webrtc-app/current/webrtc-app/dist/* /usr/share/nginx/html/
              
              # Restart services
              sudo systemctl start flask-backend
              sudo systemctl start nginx
              
              echo "‚úÖ Rollback completed successfully"
            else
              echo "‚ùå No backup found, manual intervention required"
            fi

      - name: Deployment Status Notification
        if: always()
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "=== Final Deployment Status ==="
            echo "Commit: ${{ github.sha }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Timestamp: $(date)"

            if sudo systemctl is-active --quiet flask-backend && sudo systemctl is-active --quiet nginx; then
              echo "‚úÖ Deployment successful - All services are running"
              echo "üåê Application should be accessible at: http://${{ secrets.EC2_HOST }}"
            else
              echo "‚ùå Deployment failed - Some services are not running"
              echo "Flask Backend Status: $(sudo systemctl is-active flask-backend)"
              echo "Nginx Status: $(sudo systemctl is-active nginx)"
            fi
