name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      config-changed: ${{ steps.changes.outputs.config }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'webrtc-app/**'
            backend:
              - 'Flask-Backend/**'
            config:
              - 'nginx.conf'
              - '.github/workflows/**'

  build-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./webrtc-app/package-lock.json"

      - name: Install frontend dependencies
        working-directory: ./webrtc-app
        run: npm ci

      - name: Build frontend
        working-directory: ./webrtc-app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./webrtc-app/dist

  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install backend dependencies
        working-directory: ./Flask-Backend
        run: |
          python -m pip install --upgrade pip
          # Don't overwrite the existing requirements.txt - use it instead
          pip install -r requirements.txt

      - name: Test backend imports
        working-directory: ./Flask-Backend
        run: |
          python -c "import server; print('Backend imports successfully')"

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ./Flask-Backend

  deploy:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend]
    # Deploy if any changes are detected and we're on main branch
    if: |
      always() && 
      github.ref == 'refs/heads/main' && 
      (needs.detect-changes.outputs.frontend-changed == 'true' || 
       needs.detect-changes.outputs.backend-changed == 'true' || 
       needs.detect-changes.outputs.config-changed == 'true') &&
      (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') &&
      (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped')
    environment: webrtc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build artifacts
        if: needs.detect-changes.outputs.frontend-changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./webrtc-app/dist

      - name: Download backend artifacts
        if: needs.detect-changes.outputs.backend-changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./Flask-Backend

      - name: Prepare deployment files
        run: |
          echo "Preparing deployment..."
          echo "Frontend changed: ${{ needs.detect-changes.outputs.frontend-changed }}"
          echo "Backend changed: ${{ needs.detect-changes.outputs.backend-changed }}"
          echo "Config changed: ${{ needs.detect-changes.outputs.config-changed }}"

          # Create deployment directory structure
          mkdir -p ./deploy-files

          # Copy files based on what changed
          if [ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]; then
            echo "Including frontend files..."
            cp -r ./webrtc-app ./deploy-files/
          fi

          if [ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]; then
            echo "Including backend files..."
            cp -r ./Flask-Backend ./deploy-files/
          fi

          if [ "${{ needs.detect-changes.outputs.config-changed }}" == "true" ]; then
            echo "Including config files..."
            cp ./nginx.conf ./deploy-files/
          fi

      - name: Upload deployment files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./deploy-files/*"
          target: "/tmp/deploy"
          rm: true

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Deployment variables
            FRONTEND_CHANGED="${{ needs.detect-changes.outputs.frontend-changed }}"
            BACKEND_CHANGED="${{ needs.detect-changes.outputs.backend-changed }}"
            CONFIG_CHANGED="${{ needs.detect-changes.outputs.config-changed }}"

            echo "=== Deployment Plan ==="
            echo "Frontend changes: $FRONTEND_CHANGED"
            echo "Backend changes: $BACKEND_CHANGED"
            echo "Config changes: $CONFIG_CHANGED"
            echo "======================="

            # Create application directory
            sudo mkdir -p /opt/webrtc-app
            sudo chown ec2-user:ec2-user /opt/webrtc-app

            # Backup current deployment if this is a major deployment
            if [ "$FRONTEND_CHANGED" == "true" ] || [ "$BACKEND_CHANGED" == "true" ]; then
              if [ -d "/opt/webrtc-app/current" ]; then
                echo "Creating backup of current deployment..."
                sudo rm -rf /opt/webrtc-app/backup
                sudo cp -r /opt/webrtc-app/current /opt/webrtc-app/backup
              fi
            fi

            # Create current directory if it doesn't exist
            mkdir -p /opt/webrtc-app/current

            # Deploy backend if changed
            if [ "$BACKEND_CHANGED" == "true" ]; then
              echo "Deploying backend changes..."
              
              # Stop backend service
              sudo systemctl stop flask-backend || true
              
              # Update backend files
              if [ -d "/tmp/deploy/Flask-Backend" ]; then
                rm -rf /opt/webrtc-app/current/Flask-Backend
                cp -r /tmp/deploy/Flask-Backend /opt/webrtc-app/current/
              fi

              # Setup Python environment and install backend dependencies
              cd /opt/webrtc-app/current/Flask-Backend
              python3 -m venv venv
              source venv/bin/activate
              pip install --upgrade pip
              pip install -r requirements.txt

              # Verify gunicorn installation
              echo "Checking Gunicorn installation..."
              which gunicorn
              gunicorn --version

              # Create/update systemd service for Flask backend
              sudo tee /etc/systemd/system/flask-backend.service > /dev/null <<EOF
            [Unit]
            Description=Flask Backend for WebRTC App
            After=network.target mongod.service
            Requires=mongod.service

            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/opt/webrtc-app/current/Flask-Backend
            Environment=PATH=/opt/webrtc-app/current/Flask-Backend/venv/bin
            Environment=FLASK_ENV=production
            Environment=PYTHONPATH=/opt/webrtc-app/current/Flask-Backend
            ExecStart=/opt/webrtc-app/current/Flask-Backend/venv/bin/gunicorn --worker-class eventlet -w 1 --bind 0.0.0.0:5002 wsgi:app
            Restart=always
            RestartSec=10
            StandardOutput=journal
            StandardError=journal

            [Install]
            WantedBy=multi-user.target
            EOF

              sudo systemctl daemon-reload
              sudo systemctl enable flask-backend
              sudo systemctl start flask-backend
              
              echo "✅ Backend deployment completed"
            else
              echo "⏭️ Skipping backend deployment (no changes)"
            fi

            # Deploy frontend if changed
            if [ "$FRONTEND_CHANGED" == "true" ]; then
              echo "Deploying frontend changes..."
              
              # Update frontend files
              if [ -d "/tmp/deploy/webrtc-app/dist" ]; then
                sudo rm -rf /usr/share/nginx/html/*
                sudo cp -r /tmp/deploy/webrtc-app/dist/* /usr/share/nginx/html/
                echo "✅ Frontend files updated"
              fi
            else
              echo "⏭️ Skipping frontend deployment (no changes)"
            fi

            # Update nginx config if changed
            if [ "$CONFIG_CHANGED" == "true" ]; then
              echo "Updating nginx configuration..."
              
              # Stop nginx
              sudo systemctl stop nginx || true
              
              # Update nginx config
              if [ -f "/tmp/deploy/nginx.conf" ]; then
                sudo cp /tmp/deploy/nginx.conf /etc/nginx/conf.d/webrtc-app.conf
                # Remove default nginx configuration if it exists
                sudo rm -f /etc/nginx/conf.d/default.conf
                sudo rm -f /etc/nginx/sites-enabled/default
                echo "✅ Nginx configuration updated"
              fi
              
              # Test nginx configuration
              sudo nginx -t
              sudo systemctl start nginx
            else
              echo "⏭️ Skipping nginx config update (no changes)"
              
              # Still restart nginx if frontend changed to pick up new files
              if [ "$FRONTEND_CHANGED" == "true" ]; then
                echo "Restarting nginx to pick up new frontend files..."
                sudo systemctl restart nginx
              fi
            fi

            # Install and configure MongoDB if not already installed (one-time setup)
            if ! command -v mongod &> /dev/null; then
              echo "Installing MongoDB..."
              sudo tee /etc/yum.repos.d/mongodb-org-7.0.repo > /dev/null <<EOF
            [mongodb-org-7.0]
            name=MongoDB Repository
            baseurl=https://repo.mongodb.org/yum/amazon/2023/mongodb-org/7.0/x86_64/
            gpgcheck=1
            enabled=1
            gpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc
            EOF
              sudo dnf install -y mongodb-org
              sudo systemctl enable mongod
            fi
            sudo systemctl start mongod || true

            # Install nginx if not already installed (one-time setup)
            if ! command -v nginx &> /dev/null; then
              echo "Installing Nginx..."
              sudo dnf install -y nginx
              sudo systemctl enable nginx
            fi

            # Ensure all services are running
            if [ "$BACKEND_CHANGED" == "true" ] || [ "$CONFIG_CHANGED" == "true" ]; then
              sudo systemctl start flask-backend
            fi
            sudo systemctl start nginx

            # Clean up temporary files
            rm -rf /tmp/deploy

            echo "🎉 Deployment completed successfully!"

      - name: Health Check
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Wait for services to start
            sleep 10

            BACKEND_CHANGED="${{ needs.detect-changes.outputs.backend-changed }}"
            FRONTEND_CHANGED="${{ needs.detect-changes.outputs.frontend-changed }}"

            # Check if Flask backend is responding (only if backend was deployed)
            if [ "$BACKEND_CHANGED" == "true" ]; then
              if curl -f http://localhost:5002/ > /dev/null 2>&1; then
                echo "✅ Flask backend is healthy"
              else
                echo "❌ Flask backend health check failed"
                sudo systemctl status flask-backend --no-pager
                exit 1
              fi
            else
              echo "⏭️ Skipping backend health check (no backend changes)"
            fi

            # Check if Nginx is serving the frontend (always check since nginx might restart)
            if curl -f http://localhost/ > /dev/null 2>&1; then
              echo "✅ Nginx frontend is healthy"
            else
              echo "❌ Nginx frontend health check failed"
              sudo systemctl status nginx --no-pager
              exit 1
            fi

            echo "🎉 All deployed services are healthy and running!"

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "⚠️ Deployment failed, rolling back to previous version..."

            BACKEND_CHANGED="${{ needs.detect-changes.outputs.backend-changed }}"
            FRONTEND_CHANGED="${{ needs.detect-changes.outputs.frontend-changed }}"

            # Stop current services
            if [ "$BACKEND_CHANGED" == "true" ]; then
              sudo systemctl stop flask-backend || true
            fi

            if [ "$FRONTEND_CHANGED" == "true" ] || [ "${{ needs.detect-changes.outputs.config-changed }}" == "true" ]; then
              sudo systemctl stop nginx || true
            fi

            # Rollback to backup if it exists
            if [ -d "/opt/webrtc-app/backup" ]; then
              sudo rm -rf /opt/webrtc-app/current
              sudo mv /opt/webrtc-app/backup /opt/webrtc-app/current
              
              # Restore frontend files if they were changed
              if [ "$FRONTEND_CHANGED" == "true" ]; then
                sudo rm -rf /usr/share/nginx/html/*
                sudo cp -r /opt/webrtc-app/current/webrtc-app/dist/* /usr/share/nginx/html/
              fi
              
              # Restart services based on what was deployed
              if [ "$BACKEND_CHANGED" == "true" ]; then
                sudo systemctl start flask-backend
              fi
              
              if [ "$FRONTEND_CHANGED" == "true" ] || [ "${{ needs.detect-changes.outputs.config-changed }}" == "true" ]; then
                sudo systemctl start nginx
              fi
              
              echo "✅ Rollback completed successfully"
            else
              echo "❌ No backup found, manual intervention required"
            fi

      - name: Deployment Status Notification
        if: always()
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "=== Final Deployment Status ==="
            echo "Commit: ${{ github.sha }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Timestamp: $(date)"
            echo "Frontend changed: ${{ needs.detect-changes.outputs.frontend-changed }}"
            echo "Backend changed: ${{ needs.detect-changes.outputs.backend-changed }}"
            echo "Config changed: ${{ needs.detect-changes.outputs.config-changed }}"

            # Check service status
            BACKEND_ACTIVE=$(sudo systemctl is-active flask-backend)
            NGINX_ACTIVE=$(sudo systemctl is-active nginx)

            if [ "$BACKEND_ACTIVE" = "active" ] && [ "$NGINX_ACTIVE" = "active" ]; then
              echo "✅ Deployment successful - All services are running"
              echo "🌐 Application should be accessible at: http://${{ secrets.EC2_HOST }}"
            else
              echo "❌ Deployment failed - Some services are not running"
              echo "Flask Backend Status: $BACKEND_ACTIVE"
              echo "Nginx Status: $NGINX_ACTIVE"
            fi

  # Add summary job to show what was deployed
  deployment-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-frontend, build-backend, deploy]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Deployment Summary
        run: |
          echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: ${{ needs.detect-changes.outputs.frontend-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: ${{ needs.detect-changes.outputs.backend-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Config**: ${{ needs.detect-changes.outputs.config-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Build**: ${{ needs.build-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Build**: ${{ needs.build-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.frontend-changed }}" == "false" ] && [ "${{ needs.detect-changes.outputs.backend-changed }}" == "false" ] && [ "${{ needs.detect-changes.outputs.config-changed }}" == "false" ]; then
            echo "⏭️ **No deployment needed** - No changes detected in frontend, backend, or config files." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Deployment completed** - Only changed components were built and deployed." >> $GITHUB_STEP_SUMMARY
          fi
