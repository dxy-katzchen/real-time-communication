name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./webrtc-app/package-lock.json"

      - name: Install frontend dependencies
        working-directory: ./webrtc-app
        run: npm ci

      - name: Build frontend
        working-directory: ./webrtc-app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./webrtc-app/dist

  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install backend dependencies
        working-directory: ./Flask-Backend
        run: |
          python -m pip install --upgrade pip
          pip install Flask Flask-CORS Flask-SocketIO pymongo
          pip freeze > requirements.txt

      - name: Test backend imports
        working-directory: ./Flask-Backend
        run: |
          python -c "import server; print('Backend imports successfully')"

  deploy:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.ref == 'refs/heads/main'
    environment: webrtc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./webrtc-app/dist

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/real-time-communication

            # Handle git conflicts by stashing local changes
            echo "Stashing local changes..."
            git stash push -m "Auto-stash before deployment $(date)"

            # Pull latest changes
            echo "Pulling latest changes..."
            git pull origin main

            # Backend setup
            echo "Setting up backend..."
            cd Flask-Backend
            source venv/bin/activate
            python -m pip install --upgrade pip
            pip install Flask Flask-CORS Flask-SocketIO pymongo

            # Stop existing backend processes
            echo "Stopping existing backend processes..."
            pkill -f "python.*server.py" || true
            pkill -f "gunicorn.*server" || true

            # Wait a moment for processes to stop
            sleep 2

            # Start backend with nohup
            echo "Starting backend server..."
            nohup python server.py > ../backend.log 2>&1 &

            # Verify backend is starting
            sleep 3
            if ps aux | grep -v grep | grep "python.*server.py" > /dev/null; then
                echo "Backend server started successfully"
            else
                echo "Warning: Backend server may not have started properly"
                echo "Last few lines of backend log:"
                tail -10 ../backend.log || echo "Could not read backend log"
            fi

            # Frontend setup
            echo "Setting up frontend..."
            cd ../webrtc-app

            # Clean install to avoid cache issues
            rm -rf node_modules package-lock.json
            npm install
            npm run build

            # Verify build exists
            if [ -d "dist" ]; then
                echo "Frontend build completed successfully"
                # Copy frontend build to nginx directory
                sudo mkdir -p /var/www/html
                sudo cp -r dist/* /var/www/html/
                echo "Frontend files copied to nginx directory"
            else
                echo "Error: Frontend build failed - dist directory not found"
                exit 1
            fi

            # Restart nginx
            echo "Reloading nginx..."
            sudo systemctl reload nginx

            # Check nginx status
            if sudo systemctl is-active --quiet nginx; then
                echo "Nginx is running"
            else
                echo "Warning: Nginx may not be running properly"
                sudo systemctl status nginx
            fi

            echo "Deployment completed successfully"
            echo "Backend log location: /home/ec2-user/real-time-communication/backend.log"
            echo "To check backend status: ps aux | grep python"
            echo "To check nginx status: sudo systemctl status nginx"
