name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./webrtc-app/package-lock.json"

      - name: Install frontend dependencies
        working-directory: ./webrtc-app
        run: npm ci

      - name: Build frontend
        working-directory: ./webrtc-app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./webrtc-app/dist

  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install backend dependencies
        working-directory: ./Flask-Backend
        run: |
          python -m pip install --upgrade pip
          pip install Flask Flask-CORS Flask-SocketIO pymongo
          pip freeze > requirements.txt

      - name: Test backend imports
        working-directory: ./Flask-Backend
        run: |
          python -c "import server; print('Backend imports successfully')"

  deploy:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.ref == 'refs/heads/main'
    environment: webrtc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./webrtc-app/dist

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 300s
          command_timeout: 300s
          script: |
            set -e  # Exit on any error

            echo "Starting deployment at $(date)"
            cd /home/ec2-user/real-time-communication

            # Handle git conflicts by stashing local changes
            echo "Stashing local changes..."
            git stash push -m "Auto-stash before deployment $(date)" || echo "No changes to stash"

            # Pull latest changes
            echo "Pulling latest changes..."
            git pull origin main

            # Backend setup
            echo "Setting up backend..."
            cd Flask-Backend

            # Activate virtual environment
            if [ ! -d "venv" ]; then
                echo "Creating virtual environment..."
                python3 -m venv venv
            fi
            source venv/bin/activate

            # Install dependencies
            echo "Installing Python dependencies..."
            python -m pip install --upgrade pip --quiet
            pip install Flask Flask-CORS Flask-SocketIO pymongo --quiet

            # Stop existing backend processes
            echo "Stopping existing backend processes..."
            pkill -f "python.*server.py" || echo "No existing server processes found"
            pkill -f "gunicorn.*server" || echo "No existing gunicorn processes found"

            # Wait for processes to stop
            sleep 3

            # Start backend
            echo "Starting backend server..."
            nohup python server.py > ../backend.log 2>&1 &
            sleep 2

            # Verify backend started
            if pgrep -f "python.*server.py" > /dev/null; then
                echo "‚úì Backend server started successfully"
            else
                echo "‚úó Backend server failed to start"
                echo "Backend log:"
                cat ../backend.log || echo "Could not read backend log"
                exit 1
            fi

            # Frontend setup
            echo "Setting up frontend..."
            cd ../webrtc-app

            # Check if Node.js is available
            if ! command -v node &> /dev/null; then
                echo "Installing Node.js..."
                curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                sudo apt-get install -y nodejs
            fi

            # Clean previous build
            echo "Cleaning previous build..."
            rm -rf node_modules package-lock.json dist

            # Install dependencies and build
            echo "Installing Node.js dependencies..."
            npm install --silent

            echo "Building frontend..."
            npm run build

            # Verify build
            if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
                echo "‚úì Frontend build completed successfully"
            else
                echo "‚úó Frontend build failed - dist directory is empty or missing"
                exit 1
            fi

            # Setup Nginx
            echo "Setting up Nginx..."

            # Create nginx directory if it doesn't exist
            sudo mkdir -p /var/www/html

            # Backup existing files
            if [ -d "/var/www/html_backup" ]; then
                sudo rm -rf /var/www/html_backup
            fi
            sudo cp -r /var/www/html /var/www/html_backup 2>/dev/null || echo "No previous files to backup"

            # Copy new files
            sudo cp -r dist/* /var/www/html/

            # Set proper permissions
            sudo chown -R nginx:nginx /var/www/html/ 2>/dev/null || sudo chown -R www-data:www-data /var/www/html/
            sudo chmod -R 755 /var/www/html/

            echo "‚úì Frontend files copied to nginx directory"

            # Restart nginx
            echo "Restarting nginx..."
            sudo systemctl reload nginx

            # Verify nginx is running
            if sudo systemctl is-active --quiet nginx; then
                echo "‚úì Nginx is running"
            else
                echo "‚úó Nginx failed to start"
                sudo systemctl status nginx
                exit 1
            fi

            echo "üéâ Deployment completed successfully at $(date)"
            echo ""
            echo "üìä Deployment Summary:"
            echo "Backend: http://$(curl -s ifconfig.me):5002"
            echo "Frontend: http://$(curl -s ifconfig.me)"
            echo "Logs: /home/ec2-user/real-time-communication/backend.log"
            echo ""
            echo "üîç Health Check Commands:"
            echo "Backend status: pgrep -f 'python.*server.py'"
            echo "Nginx status: sudo systemctl status nginx"
            echo "View logs: tail -f /home/ec2-user/real-time-communication/backend.log"
