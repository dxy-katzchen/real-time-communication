name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./webrtc-app/package-lock.json"

      - name: Install frontend dependencies
        working-directory: ./webrtc-app
        run: npm ci

      - name: Build frontend
        working-directory: ./webrtc-app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ./webrtc-app/dist

  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install backend dependencies
        working-directory: ./Flask-Backend
        run: |
          python -m pip install --upgrade pip
          pip install Flask Flask-CORS Flask-SocketIO pymongo
          pip freeze > requirements.txt

      - name: Test backend imports
        working-directory: ./Flask-Backend
        run: |
          python -c "import server; print('Backend imports successfully')"

  deploy:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.ref == 'refs/heads/main'
    environment: webrtc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./webrtc-app/dist

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            /home/ec2-user/deploy.sh
